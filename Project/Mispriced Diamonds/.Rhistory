print("Hello World!!")
setwd("G:/Udemy/Machine Learning A-Z - Hands on Python and R in Data Science/Project/Section 5 - Multiple Linear Regression")
# Data Preprocessing
dataset = read.csv('50_Startups.csv')
View(dataset)
View(dataset)
datset$State = factor(dataset$State, levels = c('New york', 'California', 'Florida'), labels(1, 2, 3))
# Splitting dataset into Training Set and Test Set
library(caTools)
set.seed(0)
split = sample.split(dataset$Profit, SplitRatio = 0.2)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split==FALSE)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
datset$State = factor(dataset$State, levels = c('New york', 'California', 'Florida'), labels(1, 2, 3))
View(dataset)
View(dataset)
# Encoding State Column
datset$State = factor(dataset$State, levels = c('New York', 'California', 'Florida'), labels(1, 2, 3))
# Data Preprocessing
dataset = read.csv('50_Startups.csv')
# Encoding State Column
dataset$State = factor(dataset$State, levels = c('New York', 'California', 'Florida'), labels(1, 2, 3))
# Splitting dataset into Training Set and Test Set
library(caTools)
set.seed(0)
split = sample.split(dataset$Profit, SplitRatio = 0.2)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split==FALSE)
View(dataset)
View(dataset)
View(dataset)
View(dataset)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
dataset$State = factor(dataset$State, levels = c('New York', 'California', 'Florida'), labels(1, 2, 3))
View(dataset)
View(dataset)
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State, levels = c('New York', 'California', 'Florida'), labels(1, 2, 3))
View(dataset)
View(dataset)
# Data Preprocessing
dataset = read.csv('50_Startups.csv')
# Encoding State Column
dataset$State = factor(dataset$State, levels = c('New York', 'California', 'Florida'), labels = c(1, 2, 3))
# Splitting dataset into Training Set and Test Set
library(caTools)
set.seed(0)
split = sample.split(dataset$Profit, SplitRatio = 0.2)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split==FALSE)
View(dataset)
View(dataset)
library(caTools)
set.seed(0)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split==FALSE)
View(dataset)
View(dataset)
regressor = lm(formula = Profit ~ ., data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ ., data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
test_set
regressor = lm(formula = Profit ~ R.D.Spend, data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
test_set
dataset = read.csv('50_Startups.csv')
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
dataset = read.csv('50_Startups.csv')
# Encoding the state column
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
library(caTools)
set.seed(0)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataste, split == FALSE)
test_set = subset(dataset, split == FALSE)
regressor = lm(formula = Profit ~ ., data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  + Marketing.Spend + State, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  + Marketing.Spend + State, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  + Marketing.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend, data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend  + Marketing.Spend, data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend, data = dataset)
summary(regressor)
dataset = read.csv(file.choose())
setwd("G:/Udemy/R programming A-Z - R for Data Science with Real Exercises/Project/Mispriced Diamonds")
dataset = read.csv('Mispriced-Diamonds.csv')
use('ggplot2')
library('ggplot2')
View(dataset)
View(dataset)
ggplot(data = dataset, aes(x = carat, y = price)) +
geom_point()
ggplot(data = dataset, aes(x = carat, y = price, colour = clarity)) +
geom_point()
ggplot(data = dataset, aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1)
ggplot(data = dataset[dataset$carat < 2.5], aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1)
ggplot(data = dataset[dataset$carat < 2.5,], aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1)
ggplot(data = dataset[dataset$carat < 2.5], aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1)
ggplot(data = dataset[dataset$carat < 2.5,], aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1) +
geom_smooth()
ggplot(data = dataset[dataset$carat < 2.5,], aes(x = carat, y = price, colour = clarity)) +
geom_point(alpha = 0.1) +
geom_smooth()
x <- 2L
typeof(x)
x = 2L
typeof(x)
y = 2.5
typeof(y)
s = "Test"
typeof(s)
z = 3+2i
typeof(z)
a = TRUE
typeof(a)
a = FALSE
typeof(a)
a = TRUE
b = FALSE
typeof(a)
typeof(b)
# Logical
a = T
b = F
typeof(a)
typeof(b)
a
b
2*3
2**3
3/3
4/3
4%3
4L%3L
"A" + "B"
paste("A", "B")
paste("Hello", "World")
5<=5
x = 1
while(x<3){
print("Hello World")
x++
}
while(x<3)
print("Hello World")
x = 1
while(FALSE) {
print("Hello World")
}
x = 1
while(x<3) {
print("Hello World");
x = x+1
}
for(i in 1:3){
print("Hello World")
}
i = 1
while(i<=5){
print(i)
i = i + 1
}
for(i in 1:5){
print(i)
}
i = 1
if(i>0){
print("Positive")
}
i = 1
if(i>0){
print("Positive")
} else {
print("Negative")
}
i = -1
if(i>0){
print("Positive")
} else {
print("Negative")
}
i = 1
if(i>0){
print("Positive")
} else if(i==0){
print("Neither Positive NorNegative")
} else {
print("Negative")
}
i = 0
if(i>0){
print("Positive")
} else if(i==0){
print("Neither Positive NorNegative")
} else {
print("Negative")
}
number = rnorm()
number = rnorm(1)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) count++
if(total>400) break
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) count++
if(total>400)
break
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) count++
if(total>400){
break()
}
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) {
count++
}
if(total>400){
break()
}
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) count = count +1
if(total>400){
break()
}
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
print(number)
if(number>-1 & number<1) count = count +1
if(total>400){
break()
}
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
print(number)
if(number>-1 & number<1) {
count = count + 1
}
if(total>400){
break()
}
}
print(number/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
print(number)
if(number>-1 & number<1) {
count = count + 1
}
if(total>400){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) {
count = count + 1
}
if(total>4000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-1 & number<1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number>-2 & number<-1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number > -2 & number < -1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number > 1 & number < 2) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number > 1 & number < 2) {
count = count + 1
}
if(total>400000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number > -1 & number < 1) {
count = count + 1
}
if(total>400000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1)
total = total + 1
if(number > -1 & number < 1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1, mean = 0, sd = 1)
total = total + 1
if(number > -1 & number < 1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1, mean = 0, sd = 1)
total = total + 1
if(number > -1 & number < 1) {
count = count + 1
}
if(total>40){
break()
}
}
print(count/total)
total = 0
count = 0
number = 0
while(TRUE) {
number = rnorm(1, mean = 0, sd = 1)
total = total + 1
if(number > -1 & number < 1) {
count = count + 1
}
if(total>40000){
break()
}
}
print(count/total)
